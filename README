uPNG -- derived from uPNG version 20100808
==========================================

Copying
-------

Copyright (c) 2005-2010 Lode Vandevenne
Copyright (c) 2010 Sean Middleditch

This software is provided 'as-is', without any express or implied
warranty. In no event will the authors be held liable for any damages
arising from the use of this software.

Permission is granted to anyone to use this software for any purpose,
including commercial applications, and to alter it and redistribute it
freely, subject to the following restrictions:

		1. The origin of this software must not be misrepresented; you must not
		claim that you wrote the original software. If you use this software
		in a product, an acknowledgment in the product documentation would be
		appreciated but is not required.

		2. Altered source versions must be plainly marked as such, and must not be
		misrepresented as being the original software.

		3. This notice may not be removed or altered from any source
		distribution.

Installation
------------

Copy the upng.c and upng.h files into your project, and add them to your build
system.  upng.c will compile as C++ if necessary.

Usage
-----

To load a PNG, you must create an upng_t instance, load the raw PNG into the
decoder, and then you can query the upng_t for image properties and the
decoded image buffer.

  upng_t* upng;

  upng = upng_new();
  upng_decode_file(upng, "image.png");
  /* do stuff with image */
  upng_free(upng);

The core functions are:

  upng_new()			Returns a new upng_t object
  upng_free(upng_t*)	Frees the resources attached to a upng_t object

  upng_inspect(upng_t*, const char*)	Determines image attributs of data in string (does not decode image)
  upng_decode(upng_t*, const char*)		Decodes image in string

  upng_inspect_file(upng_t*, const char*)	Determines image attributs of data in given file path (does not decode image)
  upng_decode_file(upng_t*, const char*)	Decodes image in given file path

The query functions are:

  upng_get_width(upng_t*)		Returns width of image in pixels
  upng_get_height(upng_t*)		Returns height of image in pixels
  upng_get_size(upng_t*)		Returns the total size of the image buffer in bytes
  upng_get_bpp(upng_t*)			Returns the number of bits per pixel (e.g., 32 for 8-bit RGBA)
  upng_get_format(upng_t*)		Returns the format of the image buffer (see below)
  upng_get_buffer(upng_t*)		Returns a pointer to the image buffer

Additionally, for error handling, you can use:

  upng_get_error(upng_t*)		Returns the error state of the upng object (UPNG_EOK means no error)
  upng_get_error_line(upng_t*)	Returns the line in the upng.c file where the error state was set

The formats supported are:

  UPNG_RGB_888		24-bit RGB

  UPNG_RGBA_8888	32-bit RGBA

  UPNG_G_1			1-bit Greyscale
  UPNG_G_2			2-bit Greyscale
  UPNG_G_4			4-bit Greyscale
  UPNG_G_8			8-bit Greyscale

  UPNG_GA_1			1-bit Greyscale w/ 1-bit Alpha
  UPNG_GA_2			2-bit Greyscale w/ 2-bit Alpha
  UPNG_GA_4			4-bit Greyscale w/ 4-bit Alpha
  UPNG_GA_8			8-bit Greyscale w/ 8-bit Alpha

Possible error states are:

  UPNG_EOK			No error (success)
  UPNG_ENOMEM		Out of memory
  UPNG_ENOTFOUND	Resource not found
  UPNG_ENOTPNG		Invalid file header (not a PNG image)
  UPNG_EMALFORMED	PNG image data does not follow spec and is malformed
  UPNG_EUNSUPPORTED	PNG image data is well-formed but not supported by uPNG
